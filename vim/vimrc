" Example Vim configuration.
" Copy or symlink to ~/.vimrc or ~/_vimrc.
" to get pink.vim to work
set t_Co=256

" I'd like to use tab to autocomplete instead of Ctrl-p

map <Tab> <C-p>

set nocompatible                  " Must come first because it changes other options.

"silent! call pathogen#runtime_append_all_bundles()

syntax enable                     " Turn on syntax highlighting.
set background=dark

filetype plugin indent on         " Turn on file type detection.

filetype plugin on                 " for the R vim add on 

runtime macros/matchit.vim        " Load the matchit plugin.

set showcmd                       " Display incomplete commands.
set showmode                      " Display the mode you're in.

set backspace=indent,eol,start    " Intuitive backspacing.

set hidden                        " Handle multiple buffers better.

set wildmenu                      " Enhanced command line completion.
set wildmode=list:longest         " Complete files like a shell.

set ignorecase                    " Case-insensitive searching.
set smartcase                     " But case-sensitive if expression contains a capital letter.

set number                        " Show line numbers.
set ruler                         " Show cursor position.

set incsearch                     " Highlight matches as you type.
set hlsearch                      " Highlight matches.
":nnoremap <silent> <C-l> :noh<CR><C-l>

set wrap                          " Turn on line wrapping.
set scrolloff=3                   " Show 3 lines of context around the cursor.

set title                         " Set the terminal's title

set visualbell                    " No beeping.

set nobackup                      " Don't make a backup before overwriting a file.
set nowritebackup                 " And again.
set directory=$HOME/.vim/tmp//,.  " Keep swap files in one location

" UNCOMMENT TO USE
set tabstop=2                    " Global tab width.
set shiftwidth=2                 " And again, related.
set expandtab                    " Use spaces instead of tabs

set laststatus=2                  " Show the status line all the time
" Useful status information at bottom of screen
"set statusline=[%n]\ %<%.99f\ %h%w%m%r%y\ %{fugitive#statusline()}%{exists('*CapsLockStatusline')?CapsLockStatusline():''}%=%-16(\ %l,%c-%v\ %)%P

colorscheme vividchalk
"colorscheme solarized
"colorscheme topfunky-light
"colorscheme railscasts	
"colorscheme default

let mapleader=","

" Tab mappings.
" map <leader>tt :tabnew<cr>
" map <leader>te :tabedit
" map <leader>tc :tabclose<cr>
" map <leader>to :tabonly<cr>
" map <leader>tn :tabnext<cr>
" map <leader>tp :tabprevious<cr>
" map <leader>tf :tabfirst<cr>
" map <leader>tl :tablast<cr>
" map <leader>tm :tabmove
" map <leader>test  :!bash script/test
" map <leader>xl <c-x>  <c-l> 

" map make stuff

map <leader>m :!make <cr>
map <leader>y :!python % <cr>
map <leader>r :!ruby % <cr>
map <leader>c :!g++ % <cr>
map <leader>a :!./a.out <cr>

" map screen jumping

map <leader>h <c-w>h
map <leader>j <c-w>j
map <leader>k <c-w>k
map <leader>l <c-w>l

" #################### VIM to ipython via tmux
" futuredale setup

autocmd FileType python map <buffer> <leader>i :w<CR>:!tmux send-keys -t ipython "\%time run  %:p" enter<CR><CR>

" #################### to output to file instead of stdout

:vnoremap map <leader>p :!python<CR>


" #################### to output to file instead of stdout


" map buffer switching

" map <F8>  : b#

" map <leader>b :b# <cr>

" I'd like to use tab to autocomplete instead of Ctrl-p

imap qq <C-p>

" ######################## open shell in new buffer 

command! -complete=shellcmd -nargs=+ Shell call s:RunShellCommand(<q-args>)
function! s:RunShellCommand(cmdline)
    echo a:cmdline
      let expanded_cmdline = a:cmdline
        for part in split(a:cmdline, ' ')
          if part[0] =~ '\v[%#<]'
          let expanded_part = fnameescape(expand(part))
          let expanded_cmdline = substitute(expanded_cmdline, part, expanded_part, '')
          endif
        endfor
      botright new
      setlocal buftype=nofile bufhidden=wipe nobuflisted noswapfile nowrap
      call setline(1, 'You entered:    ' . a:cmdline)
      call setline(2, 'Expanded Form:  ' .expanded_cmdline)
      call setline(3,substitute(getline(2),'.','=','g'))
      execute '$read !'. expanded_cmdline
      setlocal nomodifiable
      1
endfunction

command! -complete=file -nargs=* Make call s:RunShellCommand('make '.<q-args>)
command! -complete=file -nargs=* Git call s:RunShellCommand('git '.<q-args>)

"noremap <leader>m :silent! :make \| :redraw! \| :botright :cw<cr>






" some mapping for make I found on internet
"map <F3> : call CompileGcc()<CR>
"func! CompileGcc()
"  exec "w"
"    exec "!gcc % -o %<"
"    endfunc
"
"map <F4> :call CompileRunGcc()<CR>
"    func! CompileRunGcc()
"      exec "w"
"        exec "!gcc % -o %<"
"	  exec "! ./%<"
"  endfunc
"

" open file from where last edited (GB screencast)

:au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif 
